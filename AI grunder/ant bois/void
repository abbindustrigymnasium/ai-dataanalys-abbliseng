# Simple pygame program

# Import and initialize the pygame library
import pygame
import math
from ant import Ant
from food import Food
from utils import *

pygame.init()
_sSize = [1280, 960]
gameboard = []

# for i in range(_sSize[1]):
#     for j in range(_sSize[0]):
#         # [Walkable, Food, Home, Ant, Pheromones (negative red, positive blue)]
#         gameboard.append({"walkable": True, "food": False, "ant": False, "pheromones": {"blue": 0, "red": 0}, "objects": []})
#         # [True, False, False, False, 0]

# Run until the user asks to quit
# running = True

class AntWindow():
    def __init__(self, width, height):
        self._width = width
        self._height = height
        self._running = True
        self.screen = pygame.display.set_mode([width, height])
        # Fill the background
        self.screen.fill((78, 42, 42))

    def handle_event(self, event):
        if event.type == pygame.QUIT:
            self._running = False
        elif event.type == pygame.MOUSEBUTTONUP:
            pos = pygame.mouse.get_pos()
            # everyPointInCircle(pos, 12, testFoodFunc)
            # test = Food(pos)

# class AntHill():
#     def __init__(self, location):
#         self.location = location
#         self.layers = [5,3,2]
#         everyPointInCircle(location, self.layers[0], self.drawOne)
#         everyPointInCircle(location, self.layers[1], self.drawTwo)
#         everyPointInCircle(location, self.layers[2], self.drawThree)
#         # self.draw(location)

#     def drawOne(self, location):
#         # gameboard[math.floor(location[1])][math.floor(location[0])][2] = True # Home
#         pygame.draw.circle(game.screen, (191, 123, 67), (math.floor(location[0]), math.floor(location[1])), self.layers[0])
#     def drawTwo(self, location):
#         pygame.draw.circle(game.screen, (245, 169, 76), (math.floor(location[0]), math.floor(location[1])), self.layers[1])
#     def drawThree(self, location):
#         pygame.draw.circle(game.screen, (255, 193, 112), (math.floor(location[0]), math.floor(location[1])), self.layers[2])


# def testFoodFunc(location):
#     gameboard[getArrayLocation(location)]["objects"].append(Food(location, game))

# class Food():
#     def __init__(self,location):
#         everyPointInCircle(self, location, 12, self.draw)
#     def draw(self, location):
#         gameboard[math.floor(location[1])][math.floor(location[0])][1] = True # Food
#         print(gameboard[math.floor(location[1])][math.floor(location[0])])
#         pygame.draw.circle(game.screen, (254, 196, 0), (location[0], location[1]), 1)
        
game = AntWindow(_sSize[0], _sSize[1])

# nAnts = 1
# ants = Ant(0, game)
# hill = AntHill([game._width/2, game._height/2])

while game._running:

    # Did the user click the window close button?
    for event in pygame.event.get():
        game.handle_event(event)

    # ants.displayAnt()

    # "Flip the display" - excuse me? wut
    pygame.display.flip()

# Done! Time to quit.
pygame.quit()















    
class Nest:
    def __init__(self, game_screen):
        self.posx = game_screen._width/2
        self.posy = game_screen._height/2
        self.display = pygame.draw.circle(game_screen.screen, (255, 193, 112), (math.floor(self.posx), math.floor(self.posy)), 20)
#         pygame.draw.circle(game.screen, (255, 193, 112), (math.floor(location[0]), math.floor(location[1])), self.layers[2])

class Food:
    def __init__(self, game_screen):
        self.posx = randrange(50, _sSize[0]-50)
        self.posy = randrange(50, _sSize[1]-50)
        self.display = pygame.draw.circle(game_screen.screen, (254, 196, 0), (self.posx, self.posy), 5)
        self.life = 100 # how many visits before destroyed

class Ant:
    def __init__(self, nest, game_screen):
        self.posx = nest.posx
        self.posy = nest.posy
        self.display = pygame.draw.circle(game_screen.screen, (0, 0, 0), (self.posx, self.posy), 1)
        self.scount_mode = True

class Pheromone:
    def __init__(self, ant, game_screen):
        self.posx = ant.posx
        self.posy = ant.posy
        self.life =  100
        self.display = pygame.draw.circle(game_screen.screen, (0, 0, 255), (self.posx, self.posy), 1)

class Environment:
    def __init__(self, nAnts):
        self.nAnts = nAnts
        
        self.environment = pygame.display.set_mode(_sSize)
        
        global width, height
        width = _sSize[0]
        height = _sSize[1]

        self.nest = Nest(self.environment)
        self.food = Food(self.environment)

        self.ant_data = []
        for i in range(self.nAnts):
            ant = Ant(self.nest, self.environment)
            self.ant_data.append(ant)




# game = AntWindow(_sSize[0], _sSize[1])
# test = Nest(game)
